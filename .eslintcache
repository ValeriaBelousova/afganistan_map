[{"D:\\geoserver_emg\\github_publish\\my-app\\src\\index.tsx":"1","D:\\geoserver_emg\\github_publish\\my-app\\src\\store.tsx":"2","D:\\geoserver_emg\\github_publish\\my-app\\src\\App.tsx":"3","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\map_afganistan.tsx":"4","D:\\geoserver_emg\\github_publish\\my-app\\src\\reducers\\index.ts":"5","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Afganistan_Map.tsx":"6","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\AfganistanToolbox.tsx":"7","D:\\geoserver_emg\\github_publish\\my-app\\src\\reducers\\layers.ts":"8","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\actions\\index.ts":"9","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Afganistan_Timeline.tsx":"10","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\Cards\\Radar\\radarActions\\changeZoom.ts":"11","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\Cards\\Basemap\\basemapActions\\levelChoose.ts":"12","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Icon_black.jsx":"13","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Afganistan_Layer.jsx":"14","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Icon_red.jsx":"15","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Icon_blue.jsx":"16","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Icon.jsx":"17","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\Cards\\Radar\\radarActions\\changeCenter.ts":"18","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\actionTest\\actionStatus_Date.ts":"19","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\Tools\\toolAction\\actionTool.ts":"20"},{"size":664,"mtime":1634901581471,"results":"21","hashOfConfig":"22"},{"size":145,"mtime":1629954341276,"results":"23","hashOfConfig":"22"},{"size":1552,"mtime":1634901013268,"results":"24","hashOfConfig":"22"},{"size":626,"mtime":1634201596934,"results":"25","hashOfConfig":"22"},{"size":188,"mtime":1629954341275,"results":"26","hashOfConfig":"22"},{"size":10911,"mtime":1654096003664,"results":"27","hashOfConfig":"22"},{"size":658,"mtime":1634820438209,"results":"28","hashOfConfig":"22"},{"size":16641,"mtime":1634902679526,"results":"29","hashOfConfig":"22"},{"size":148,"mtime":1629954341257,"results":"30","hashOfConfig":"22"},{"size":6991,"mtime":1634901273713,"results":"31","hashOfConfig":"22"},{"size":140,"mtime":1629954341268,"results":"32","hashOfConfig":"22"},{"size":177,"mtime":1631271640419,"results":"33","hashOfConfig":"22"},{"size":574,"mtime":1632916718099,"results":"34","hashOfConfig":"22"},{"size":3420,"mtime":1632907330628,"results":"35","hashOfConfig":"22"},{"size":566,"mtime":1632916244176,"results":"36","hashOfConfig":"22"},{"size":570,"mtime":1632918761071,"results":"37","hashOfConfig":"22"},{"size":728,"mtime":1632923855603,"results":"38","hashOfConfig":"22"},{"size":150,"mtime":1629954341268,"results":"39","hashOfConfig":"22"},{"size":162,"mtime":1632705452025,"results":"40","hashOfConfig":"22"},{"size":149,"mtime":1631271640429,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1kaa4tx",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"73"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"D:\\geoserver_emg\\github_publish\\my-app\\src\\index.tsx",[],["89","90"],"D:\\geoserver_emg\\github_publish\\my-app\\src\\store.tsx",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\App.tsx",["91","92"],"import React from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport Afganistan from './components/map_afganistan';\n\n{/*\nconst App :React.FC = (props:any) => { \n  document.title = \"Geo Server\"\n  return (\n    <div className=\"app\">\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={Main_map} />\n          <Route exact path=\"/afganistan\" component={Afganistan} />\n        </div>\n      </Router>\n    </div>)};\n  */}\n\n\nfunction App() {\n    document.title = \"Geo Server\"\n  return (\n      <div className=\"app\">\n        <Afganistan/>\n      </div>\n  );\n}\n\n\n{/*\nconst App:React.FC = (props:any) => {\n  document.title = \"Geo Server\"\n  return (\n    <div id=\"app\">\n      <Toolbox/>\n      <div id=\"map\">\n      {props.layers.map( (l:any) => {\n        let mode:string = l.toolChange;\n        if (mode === \"Afganistan\") {\n          console.log('new map');\n          return (\n            <AfganistanMap/>\n          )\n        }\n      else if (mode === \"Gismeteo\" || \n              mode === \"temperature\" ||\n              mode === \"hydro\" ||\n              mode === \"fires\" ||\n              mode === \"sat\" ||\n              mode === \"shp\" ||\n              mode === \"meteored\" ||\n              mode === \"corona\" ||\n              mode === \"radar\" ||\n              mode === \"vybory\") {\n        console.log('old map');\n        return (<LeafletMap/>)\n      }})}\n        \n      </div>\n    </div>\n);\n}\n*/}\nconst mapStateToProps = (state:any) => {\n  return {\n    layers: state.layers\n  };\n};\n\nexport default connect(mapStateToProps)(App);","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\map_afganistan.tsx",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\reducers\\index.ts",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Afganistan_Map.tsx",["93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122"],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\AfganistanToolbox.tsx",["123","124","125","126"],"import React, { useState } from 'react';\r\nimport { Accordion } from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport '../Toolbox.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Afganistan_Timeline from \"../TEST/Afganistan_Timeline\";\r\n\r\nconst Toolbox:React.FC = (props:any) => {\r\n    const [checked, setChecked] = useState(props.layers[1].downloadChecked);\r\n\r\n    return (\r\n        <div className='toolbox'>\r\n            <Afganistan_Timeline/>    \r\n        </div>\r\n    );\r\n}\r\nconst mapStateToProps = (state:any) => {\r\n    return {\r\n        layers: state.layers\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Toolbox);\r\n","D:\\geoserver_emg\\github_publish\\my-app\\src\\reducers\\layers.ts",["127"],"const INITIAL_STATE = [\r\n    {\r\n        id: 'map',\r\n        zoom: 4,\r\n        center: [34.532780, 69.165830],\r\n        style: 'https://api.mapbox.com/styles/v1/valeriabelousova/ckko1s46x69o217o2qi6rtrg2/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoidmFsZXJpYWJlbG91c292YSIsImEiOiJjanBmMmt0c2cwNjQyM3FsZ2gzY2dvemNvIn0.skr82NeiNVFPUi-zxKKqiw',\r\n        bounds: [],\r\n        polygonsArr: {},\r\n        polygons: [],\r\n        zoom_change: false,\r\n    },\r\n    {\r\n        id: 'radar',\r\n        area: 'etr',\r\n        cellsize: 20,\r\n        hour: 9,\r\n        minute: 0,\r\n        period: 1,\r\n        rainviewer: false,\r\n        overmap: false,\r\n        extent: [[28.49, -16.08], [77.5, 110.06]],\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'gismeteo',\r\n        area: 'mo',\r\n        extent: false,\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'corona',\r\n        area: 'rus',\r\n        style: 'rik',\r\n        value: 'sick',\r\n        ratio: false,\r\n        scale: [5000, 10000, 20000, 40000],\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'basemap',\r\n        level: 'M10',\r\n        level_name: '1:100 000 000',\r\n        style: 'rikNews',\r\n        export_size: 2000,\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'meteored',\r\n        area: 'etr_mercator',\r\n        extent: false,\r\n        value: 'temperature',\r\n        downloadChecked: false,\r\n        seqChecked: false,\r\n    },\r\n    {\r\n        id: 'shapefile',\r\n        name: 'New_shape',\r\n        om: 'overmap',\r\n        satellite: false,\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'hydro',\r\n        url: 'https://meteoinfo.ru/novosti/17891-gidrologicheskij-obzor-7-aprelya-2021-g',\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'fires',\r\n        site: false,\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'satellite',\r\n        om_layers: [],\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'temperature',\r\n        temp_lyr: false,\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'tools',\r\n        toolChange: 'Gismeteo',\r\n    },\r\n    {\r\n        id: 'vybory',\r\n        vybory_lyr: false,\r\n        data_type: 'gd',\r\n        value: 'ed_ros',\r\n        scale: [2, 5, 10, 15],\r\n        colors: [\"#c9cfec\", \"#82a0dd\", \"#4d58f4\", \"#030fae\", \"#000256\"],\r\n        csv_om: false,\r\n        excel: true\r\n    },\r\n    {\r\n        id: 'datamos',\r\n        dataset_id: 0,\r\n        atd_div: ['district', 'okruga'],\r\n        csv_om: false,\r\n        downloadChecked: false,\r\n    },\r\n    {\r\n        id: 'afganistan',\r\n        visible: false,\r\n        status_date: 'neutral',\r\n        visible_poly: false,\r\n        visible_poi: false,\r\n        downloadChecked: false,\r\n    }\r\n]\r\n\r\ntype tplotOptions = {\r\n    [key: string]: string\r\n}\r\n\r\nconst level_name : tplotOptions = {\r\n    M10:\"1:100 000 000\",\r\n    M05:\"1:50 000 000\",\r\n    M01:\"1:10 000 000\",\r\n    M500:\"1:500 000\",\r\n    M200:\"1:200 000\",\r\n}\r\n\r\nexport default function (state = INITIAL_STATE, action: any) {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case 'BOUNDS_CHANGE':\r\n            return state.map(l => {\r\n                if (l.id === 'map') {\r\n                    l.bounds = action.payload.layerBounds;\r\n                }\r\n                return l;\r\n            });\r\n        case 'ADD_SHAPES':\r\n            return state.map(l => {\r\n                if (l.id === 'map') {\r\n                    l.polygons = action.payload.shapes;\r\n                }\r\n                return l;\r\n            });\r\n        case 'DELETE_SHAPES':\r\n            return state.map(l => {\r\n                if (l.id === 'map') {\r\n                    l.polygons = action.payload.shapes;\r\n                }\r\n                return l;\r\n            });\r\n        case 'ADD_POLYGONS_ARR':\r\n            return state.map(l => {\r\n                if (l.id === 'map') {\r\n                    l.polygonsArr = action.payload.polygonsArr;\r\n                }\r\n                return l;\r\n            });\r\n        case 'MAP_ZOOM_CHANGE':\r\n            return state.map(l => {\r\n                if (l.id === 'map') {\r\n                    l.zoom = action.payload.zoom;\r\n                }\r\n                return l;\r\n            });\r\n        case 'MAP_CENTER_CHANGE':\r\n            return state.map(l => {\r\n                if (l.id === 'map') {\r\n                    l.center = action.payload.center;\r\n                }\r\n                return l;\r\n            });\r\n        case 'MAP_ZOOM_CHANGE_MANUALLY':\r\n            return state.map(l => {\r\n                if (l.id === 'map') {\r\n                    l.zoom_change = action.payload.checkboxChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'RADAR_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'radar') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'RADAR_AREA_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'radar') {\r\n                    l.area = action.payload.areaChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'RADAR_CELL_SIZE_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'radar') {\r\n                    l.cellsize = action.payload.cellsizeChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'RADAR_HOUR_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'radar') {\r\n                    l.hour = action.payload.hourChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'RADAR_MINUTE_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'radar') {\r\n                    l.minute = action.payload.minuteChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'RADAR_PERIOD_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'radar') {\r\n                    l.period = action.payload.periodChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'RADAR_RAINVIEWER_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'radar') {\r\n                    l.rainviewer = action.payload.checkboxChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'GISMETEO_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'gismeteo') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'GISMETEO_AREA_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'gismeteo') {\r\n                    l.area = action.payload.areaChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'GISMETEO_EXTENT_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'gismeteo') {\r\n                    l.extent = action.payload.checkboxChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'CORONA_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'corona') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'CORONA_AREA_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'corona') {\r\n                    l.area = action.payload.areaChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'CORONA_STYLE_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'corona') {\r\n                    l.style = action.payload.styleChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'CORONA_VALUE_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'corona') {\r\n                    l.value = action.payload.valueChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'CORONA_CHECKBOX_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'corona') {\r\n                    l.ratio = action.payload.checkboxChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'CORONA_SCALE_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'corona') {\r\n                    l.scale = action.payload.scaleChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'BASEMAP_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'basemap') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'BASEMAP_LEVEL_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'basemap') {\r\n                    l.level = action.payload.levelChecked;\r\n                    l.level_name = level_name[action.payload.levelChecked]\r\n                }\r\n                return l;\r\n            });\r\n        case 'BASEMAP_STYLE_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'map') {\r\n                    l.style = action.payload.style;\r\n                }\r\n                return l;\r\n            });\r\n        case 'BASEMAP_STYLEEXPORT_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'basemap') {\r\n                    l.style = action.payload.styleChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'BASEMAP_CHANGE_EXPORT_SIZE':\r\n                return state.map(l => {\r\n                    if (l.id === 'basemap') {\r\n                        l.export_size = action.payload.export_size;\r\n                    }\r\n                    return l;\r\n                });\r\n        case 'METEORED_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'meteored') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'METEORED_VALUE_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'meteored') {\r\n                    l.value = action.payload.valueChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'METEORED_AREA_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'meteored') {\r\n                    l.area = action.payload.areaChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'METEORED_EXTENT_CHOOSE':\r\n            return state.map(l => {\r\n                if (l.id === 'meteored') {\r\n                    l.extent = action.payload.checkboxChecked;\r\n                }\r\n                return l;\r\n            });\r\n        case 'SHAPEFILE_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'shapefile') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'SHAPEFILE_SAT_ADD':\r\n            return state.map(l => {\r\n                if (l.id === 'shapefile') {\r\n                    l.satellite = action.payload.addSatellite;\r\n                }\r\n                return l;\r\n            });\r\n        case 'SHAPEFILE_OM_CHANGE':\r\n            return state.map(l => {\r\n                if (l.id === 'shapefile') {\r\n                    l.om = action.payload.omChoose;\r\n                }\r\n                return l;\r\n            });\r\n        case 'SHAPEFILE_NAME_CHANGE':\r\n            return state.map(l => {\r\n                if (l.id === 'shapefile') {\r\n                    l.name = action.payload.shapefileName;\r\n                }\r\n                return l;\r\n            });\r\n        case 'SATELLITE_BUTTON_PUSH':\r\n                return state.map(l => {\r\n                    if (l.id === 'satellite') {\r\n                        l.downloadChecked = action.payload.downloadCheckedButton;\r\n                    }\r\n                    return l;\r\n                });\r\n        case 'SATELLITE_OM_LYR':\r\n            return state.map(l => {\r\n                if (l.id === 'satellite') {\r\n                    l.om_layers = action.payload.om_layers;\r\n                }\r\n                return l;\r\n            });\r\n        case 'HYDRO_URL_CHANGE':\r\n            return state.map(l => {\r\n                if (l.id === 'hydro') {\r\n                    l.url = action.payload.urlChange;\r\n                }\r\n                return l;\r\n            });\r\n        case 'HYDRO_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'hydro') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'FIRES_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'fires') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'DOWNLOAD_FROM_SITE':\r\n            return state.map(l => {\r\n                if (l.id === 'fires') {\r\n                    l.site = action.payload.downloadFromSite;\r\n                }\r\n                return l;\r\n            });\r\n        case 'TEMP_BUTTON_PUSH':\r\n            return state.map(l => {\r\n                if (l.id === 'temperature') {\r\n                    l.downloadChecked = action.payload.downloadCheckedButton;\r\n                }\r\n                return l;\r\n            });\r\n        case 'TEMP_LYR_ADD':\r\n            return state.map(l => {\r\n                if (l.id === 'temperature') {\r\n                    l.temp_lyr = action.payload.lyrAdd;\r\n                }\r\n                return l;\r\n            });\r\n        case 'TOOLS_TOOL_CHOOSE':\r\n                return state.map(l => {\r\n                    if (l.id === 'tools') {\r\n                        l.toolChange = action.payload.toolChange;\r\n                    }\r\n                    return l;\r\n                });\r\n                case 'VYBORY_BUTTON_PUSH':\r\n                    return state.map(l => {\r\n                        if (l.id === 'vybory') {\r\n                            l.downloadChecked = action.payload.downloadCheckedButton;\r\n                        }\r\n                        return l;\r\n                    });\r\n                case 'VYBORY_AREA_CHOOSE':\r\n                    return state.map(l => {\r\n                        if (l.id === 'vybory') {\r\n                            l.data_type = action.payload.areaChecked;\r\n                        }\r\n                        return l;\r\n                    });\r\n                case 'VYBORY_STYLE_CHOOSE':\r\n                    return state.map(l => {\r\n                        if (l.id === 'vybory') {\r\n                            l.value = action.payload.styleChecked;\r\n                        }\r\n                        return l;\r\n                    });\r\n                case 'VYBORY_CHECKBOX_CHOOSE':\r\n                    return state.map(l => {\r\n                        if (l.id === 'vybory') {\r\n                            l.csv_om = action.payload.checkboxChecked;\r\n                        }\r\n                        return l;\r\n                    });\r\n                case 'VYBORY_SCALE_CHOOSE':\r\n                    return state.map(l => {\r\n                        if (l.id === 'vybory') {\r\n                            l.scale = action.payload.scaleChecked;\r\n                        }\r\n                        return l;\r\n                    });\r\n                case 'VYBORY_COLOR_CHOOSE':\r\n                    return state.map(l => {\r\n                        if (l.id === 'vybory') {\r\n                            l.colors = action.payload.colorChecked;\r\n                        }\r\n                        return l;\r\n                    });\r\n                case 'AFGANISTAN_BUTTON_PUSH':\r\n                    return state.map(l => {\r\n                        if (l.id === 'afganistan') {\r\n                            l.visible = action.payload.downloadCheckedButton;\r\n                        }\r\n                        return l;\r\n                    });\r\n                case 'AFGANISTAN_STATUS_DATE':\r\n                    return state.map(l => {\r\n                        if (l.id === 'afganistan') {\r\n                            l.status_date = action.payload.status_date;\r\n                        }\r\n                        return l;\r\n                    });\r\n        default:\r\n            return state\r\n    }\r\n    ;\r\n}\r\n","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\actions\\index.ts",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Afganistan_Timeline.tsx",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149"],"import React, {useState} from 'react';\r\nimport {Button, Accordion, Card, Form} from 'react-bootstrap';\r\nimport {actionTool} from '../Tools/toolAction/actionTool';\r\nimport SpinnerForLoading from '../../additional/Spinner/SpinnerForLoading';\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport { pushButton } from \"./actionTest/buttonPush\";\r\nimport { actionStatus_Date } from './actionTest/actionStatus_Date';\r\nimport { actionZoom } from \"../Cards/Radar/radarActions/changeZoom\";\r\nimport { actionCenter } from \"../Cards/Radar/radarActions/changeCenter\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './Timeline.css';\r\n\r\n\r\n\r\nconst Afganistan_Timeline: React.FC = (props: any) => {\r\n\r\n    const click_li = (e:any) => {\r\n        \r\n        if (e.target.id == 'july_2021') {\r\n            props.setZoom(7);\r\n            props.setCenter([35.874495, 68.928351]);\r\n        }\r\n        else if (e.target.id == 'september_2021') {\r\n            props.setZoom(8);\r\n            props.setCenter([34.994495, 68.928351]);\r\n        }\r\n        else if (e.target.id == 'june_2021') {\r\n            props.setZoom(6.5);\r\n            props.setCenter([34.674495, 68.928351]);\r\n        }\r\n        else if (e.target.id == 'august_2021') {\r\n            props.setZoom(6.5);\r\n            props.setCenter([34.674495, 68.928351]);\r\n        }\r\n        else if (e.target.id == '1_may_2021' || e.target.id == 'neutral') {\r\n            props.setCenter([34.008630, 66.000947]);\r\n            props.setZoom(6);\r\n            \r\n        }\r\n        props.setStatus_Date(e.target.id);\r\n    }\r\n     return (\r\n         <div className='tools'>\r\n                 <Card.Body>\r\n                     <div className=\"container mt-0 mb-0\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-0 offset-md-0\">\r\n                                    <h4 onClick={click_li} id=\"neutral\">Война в Афганистане</h4>\r\n                                    <ul className=\"timeline\">\r\n                                        <li onClick={click_li} id=\"1_may_2021\">\r\n                                            <h5 onClick={click_li} id=\"1_may_2021\">1 мая 2021</h5>\r\n                                            {props.layers.map( (l:any) => {\r\n                                                if (l.visible===true) {\r\n                                                    let status_date:string = l.status_date;\r\n                                                    console.log('status_date', status_date);\r\n                                                    if (status_date == \"1_may_2021\") {\r\n                                                    return ( \r\n                                            <p>Официальная дата окончательного вывода вооружённых сил НАТО</p>)}}})}\r\n                                        </li>\r\n                                        <li onClick={click_li} id=\"june_2021\">\r\n                                            <h5 onClick={click_li} id=\"june_2021\">Июнь 2021</h5>\r\n                                            {props.layers.map( (l:any) => {\r\n                                                if (l.visible===true) {\r\n                                                    let status_date:string = l.status_date;\r\n                                                    console.log('status_date', status_date);\r\n                                                    if (status_date == \"june_2021\") {\r\n                                                    return (\r\n                                            <p>Активизация Талибан</p>)}}})}\r\n                                        </li>\r\n                                        <li onClick={click_li} id=\"july_2021\">\r\n                                        <h5 onClick={click_li} id=\"july_2021\">Июль 2021</h5>\r\n                                            {props.layers.map( (l:any) => {\r\n                                                if (l.visible===true) {\r\n                                                    let status_date:string = l.status_date;\r\n                                                    console.log('status_date', status_date);\r\n                                                    if (status_date == \"july_2021\") {\r\n                                                    return (\r\n                                            <p>Войска НАТО покидают Баграм</p>)}}})}\r\n                                        </li>\r\n                                        <li onClick={click_li} id=\"august_2021\">\r\n                                            <h5 onClick={click_li} id=\"august_2021\">Август 2021</h5>\r\n                                            {props.layers.map( (l:any) => {\r\n                                                if (l.visible===true) {\r\n                                                    let status_date:string = l.status_date;\r\n                                                    console.log('status_date', status_date);\r\n                                                    if (status_date == \"august_2021\") {\r\n                                                    return (\r\n                                            <p>Окружение и взятие Кабула. Бегство президента Ашрафа Гани</p>)}}})}\r\n                                        </li>\r\n                                        <li onClick={click_li} id=\"september_2021\">\r\n                                            <h5 onClick={click_li} id=\"september_2021\">5 сентября 2021</h5>\r\n                                            {props.layers.map( (l:any) => {\r\n                                                if (l.visible===true) {\r\n                                                    let status_date:string = l.status_date;\r\n                                                    console.log('status_date', status_date);\r\n                                                    if (status_date == \"september_2021\") {\r\n                                                    return (\r\n                                            <p>Силы сопротивления передислоцировались в Панджшер</p>)}}})}\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                 </Card.Body>\r\n         </div>\r\n     );\r\n }\r\n const mapStateToProps = (state:any) => {\r\n     return {\r\n       layers: state.layers\r\n     }; \r\n   };\r\n const matchDispatchToProps = (dispatch:any) => {\r\n    return bindActionCreators({\r\n        setTool: actionTool,\r\n        setStatus_Date: actionStatus_Date,\r\n        setZoom: actionZoom,\r\n        setCenter: actionCenter,\r\n    }, dispatch);\r\n  };\r\n \r\n export default connect(mapStateToProps, matchDispatchToProps)(Afganistan_Timeline);\r\n","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\Cards\\Radar\\radarActions\\changeZoom.ts",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\Cards\\Basemap\\basemapActions\\levelChoose.ts",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Icon_black.jsx",[],["150","151"],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Afganistan_Layer.jsx",["152","153","154"],"import React from 'react';\r\nimport { GeoJSON, FeatureGroup, Popup } from 'react-leaflet';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Circle, Tooltip } from 'leaflet';\r\n//import \"../css/GeojsonLayer.css\"\r\n\r\nexport default class Afganistan_Layer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      status_date: 'neutral',\r\n      data: []\r\n    };\r\n\r\n    console.log('contructor poly');\r\n  }\r\n\r\n  myStyle = (f) => {\r\n    return {\r\n      color: 'white',\r\n      weight: 1,\r\n      fillOpacity: 1,\r\n      fillColor: f.properties.color,\r\n    }\r\n  }\r\n\r\n  neutralStyle = (f) => {\r\n    return {\r\n      color: '#9ea4c8',\r\n      weight: 1,\r\n      fillOpacity: 1,\r\n      fillColor: 'white',\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log('render poly');\r\n\r\n    //console.info(this.state.data);\r\n    return (\r\n      <FeatureGroup>\r\n        {this.state.data.map(f => {\r\n          if (this.state.status_date === \"neutral\") {\r\n          return (<GeoJSON key={f.properties.objectid} data={f} style={this.neutralStyle(f)} >\r\n             <Popup>\r\n             <Table striped bordered hover>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Регион</td>\r\n                    <td>{f.properties.name_1}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Район</td>\r\n                    <td>{f.properties.name_2}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n             </Popup>\r\n             {/*<Tooltip direction=\"right\" offset={[0, 0]} opacity={1} permanent>{f.properties.name_rus}</Tooltip>*/}\r\n          </GeoJSON>)\r\n        }\r\n        else if (this.state.status_date === \"1_may_2021\" ||\r\n                  this.state.status_date === \"june_2021\" ||\r\n                  this.state.status_date === \"july_2021\" ||\r\n                  this.state.status_date === \"august_2021\" ||\r\n                  this.state.status_date === \"september_2021\"\r\n                  ) {\r\n          return (<GeoJSON key={f.properties.objectid} data={f} style={this.myStyle(f)}>\r\n             <Popup>\r\n             <Table striped bordered hover>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Регион</td>\r\n                    <td>{f.properties.name_1}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Район</td>\r\n                    <td>{f.properties.name_2}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Статус</td>\r\n                    <td>{f.properties.status}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n             </Popup>\r\n             {/*<Tooltip direction=\"right\" offset={[0, 0]} opacity={1} permanent>{f.properties.name_rus}</Tooltip>*/}\r\n          </GeoJSON>)\r\n        }\r\n      }\r\n        )}\r\n      </FeatureGroup>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.url) {\r\n      this.fetchData(this.props.url);\r\n    }\r\n    this.setState({\r\n      status_date: this.props.id,\r\n    });\r\n    //console.log(this.props);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('will unmount');\r\n\r\n  }\r\n\r\n  fetchData(url) {\r\n    let request = fetch(url)\r\n\r\n    request\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        this.setState({\r\n          data: data.features,\r\n        });\r\n      }, (error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n}","D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Icon_red.jsx",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Icon_blue.jsx",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\Icon.jsx",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\Cards\\Radar\\radarActions\\changeCenter.ts",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\TEST\\actionTest\\actionStatus_Date.ts",[],"D:\\geoserver_emg\\github_publish\\my-app\\src\\components\\Toolbox\\Tools\\toolAction\\actionTool.ts",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":6,"column":1,"nodeType":"161","messageId":"162","endLine":18,"endColumn":6},{"ruleId":"159","severity":1,"message":"160","line":31,"column":1,"nodeType":"161","messageId":"162","endLine":64,"endColumn":4},{"ruleId":"163","severity":1,"message":"164","line":4,"column":3,"nodeType":"165","messageId":"166","endLine":4,"endColumn":12},{"ruleId":"163","severity":1,"message":"167","line":9,"column":3,"nodeType":"165","messageId":"166","endLine":9,"endColumn":13},{"ruleId":"163","severity":1,"message":"168","line":10,"column":3,"nodeType":"165","messageId":"166","endLine":10,"endColumn":9},{"ruleId":"163","severity":1,"message":"169","line":11,"column":3,"nodeType":"165","messageId":"166","endLine":11,"endColumn":7},{"ruleId":"163","severity":1,"message":"170","line":15,"column":10,"nodeType":"165","messageId":"166","endLine":15,"endColumn":21},{"ruleId":"163","severity":1,"message":"171","line":16,"column":10,"nodeType":"165","messageId":"166","endLine":16,"endColumn":21},{"ruleId":"163","severity":1,"message":"172","line":22,"column":8,"nodeType":"165","messageId":"166","endLine":22,"endColumn":20},{"ruleId":"163","severity":1,"message":"173","line":24,"column":8,"nodeType":"165","messageId":"166","endLine":24,"endColumn":28},{"ruleId":"163","severity":1,"message":"174","line":27,"column":10,"nodeType":"165","messageId":"166","endLine":27,"endColumn":16},{"ruleId":"159","severity":1,"message":"175","line":40,"column":3,"nodeType":"161","messageId":"176","endLine":45,"endColumn":4},{"ruleId":"177","severity":1,"message":"178","line":41,"column":31,"nodeType":"179","messageId":"180","endLine":41,"endColumn":33},{"ruleId":"163","severity":1,"message":"181","line":49,"column":9,"nodeType":"165","messageId":"166","endLine":49,"endColumn":15},{"ruleId":"163","severity":1,"message":"182","line":51,"column":9,"nodeType":"165","messageId":"166","endLine":51,"endColumn":22},{"ruleId":"183","severity":1,"message":"184","line":55,"column":16,"nodeType":"185","messageId":"186","endLine":55,"endColumn":18},{"ruleId":"163","severity":1,"message":"187","line":82,"column":9,"nodeType":"165","messageId":"166","endLine":82,"endColumn":19},{"ruleId":"177","severity":1,"message":"188","line":98,"column":34,"nodeType":"179","messageId":"189","endLine":98,"endColumn":36},{"ruleId":"159","severity":1,"message":"175","line":99,"column":9,"nodeType":"161","messageId":"176","endLine":101,"endColumn":10},{"ruleId":"183","severity":1,"message":"190","line":105,"column":25,"nodeType":"185","messageId":"186","endLine":105,"endColumn":27},{"ruleId":"191","severity":1,"message":"192","line":109,"column":15,"nodeType":"193","messageId":"194","endLine":113,"endColumn":17},{"ruleId":"183","severity":1,"message":"190","line":127,"column":25,"nodeType":"185","messageId":"186","endLine":127,"endColumn":27},{"ruleId":"191","severity":1,"message":"192","line":131,"column":15,"nodeType":"193","messageId":"194","endLine":135,"endColumn":17},{"ruleId":"183","severity":1,"message":"190","line":148,"column":32,"nodeType":"185","messageId":"186","endLine":148,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":152,"column":15,"nodeType":"193","messageId":"194","endLine":156,"endColumn":17},{"ruleId":"183","severity":1,"message":"190","line":169,"column":32,"nodeType":"185","messageId":"186","endLine":169,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":172,"column":15,"nodeType":"193","messageId":"194","endLine":176,"endColumn":17},{"ruleId":"183","severity":1,"message":"190","line":209,"column":32,"nodeType":"185","messageId":"186","endLine":209,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":212,"column":15,"nodeType":"193","messageId":"194","endLine":216,"endColumn":17},{"ruleId":"183","severity":1,"message":"190","line":225,"column":32,"nodeType":"185","messageId":"186","endLine":225,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":228,"column":15,"nodeType":"193","messageId":"194","endLine":232,"endColumn":17},{"ruleId":"159","severity":1,"message":"175","line":248,"column":9,"nodeType":"161","messageId":"176","endLine":250,"endColumn":10},{"ruleId":"163","severity":1,"message":"195","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":19},{"ruleId":"163","severity":1,"message":"196","line":9,"column":12,"nodeType":"165","messageId":"166","endLine":9,"endColumn":19},{"ruleId":"163","severity":1,"message":"197","line":9,"column":21,"nodeType":"165","messageId":"166","endLine":9,"endColumn":31},{"ruleId":"191","severity":1,"message":"198","line":13,"column":13,"nodeType":"193","messageId":"194","endLine":13,"endColumn":35},{"ruleId":"199","severity":1,"message":"200","line":125,"column":1,"nodeType":"201","endLine":504,"endColumn":2},{"ruleId":"163","severity":1,"message":"202","line":1,"column":16,"nodeType":"165","messageId":"166","endLine":1,"endColumn":24},{"ruleId":"163","severity":1,"message":"203","line":2,"column":9,"nodeType":"165","messageId":"166","endLine":2,"endColumn":15},{"ruleId":"163","severity":1,"message":"195","line":2,"column":17,"nodeType":"165","messageId":"166","endLine":2,"endColumn":26},{"ruleId":"163","severity":1,"message":"204","line":2,"column":34,"nodeType":"165","messageId":"166","endLine":2,"endColumn":38},{"ruleId":"163","severity":1,"message":"205","line":4,"column":8,"nodeType":"165","messageId":"166","endLine":4,"endColumn":25},{"ruleId":"163","severity":1,"message":"206","line":7,"column":10,"nodeType":"165","messageId":"166","endLine":7,"endColumn":20},{"ruleId":"183","severity":1,"message":"190","line":20,"column":25,"nodeType":"185","messageId":"186","endLine":20,"endColumn":27},{"ruleId":"183","severity":1,"message":"190","line":24,"column":30,"nodeType":"185","messageId":"186","endLine":24,"endColumn":32},{"ruleId":"183","severity":1,"message":"190","line":28,"column":30,"nodeType":"185","messageId":"186","endLine":28,"endColumn":32},{"ruleId":"183","severity":1,"message":"190","line":32,"column":30,"nodeType":"185","messageId":"186","endLine":32,"endColumn":32},{"ruleId":"183","severity":1,"message":"190","line":36,"column":30,"nodeType":"185","messageId":"186","endLine":36,"endColumn":32},{"ruleId":"183","severity":1,"message":"190","line":36,"column":61,"nodeType":"185","messageId":"186","endLine":36,"endColumn":63},{"ruleId":"177","severity":1,"message":"188","line":53,"column":72,"nodeType":"179","messageId":"189","endLine":53,"endColumn":74},{"ruleId":"183","severity":1,"message":"190","line":57,"column":69,"nodeType":"185","messageId":"186","endLine":57,"endColumn":71},{"ruleId":"177","severity":1,"message":"188","line":63,"column":72,"nodeType":"179","messageId":"189","endLine":63,"endColumn":74},{"ruleId":"183","severity":1,"message":"190","line":67,"column":69,"nodeType":"185","messageId":"186","endLine":67,"endColumn":71},{"ruleId":"177","severity":1,"message":"188","line":73,"column":72,"nodeType":"179","messageId":"189","endLine":73,"endColumn":74},{"ruleId":"183","severity":1,"message":"190","line":77,"column":69,"nodeType":"185","messageId":"186","endLine":77,"endColumn":71},{"ruleId":"177","severity":1,"message":"188","line":83,"column":72,"nodeType":"179","messageId":"189","endLine":83,"endColumn":74},{"ruleId":"183","severity":1,"message":"190","line":87,"column":69,"nodeType":"185","messageId":"186","endLine":87,"endColumn":71},{"ruleId":"177","severity":1,"message":"188","line":93,"column":72,"nodeType":"179","messageId":"189","endLine":93,"endColumn":74},{"ruleId":"183","severity":1,"message":"190","line":97,"column":69,"nodeType":"185","messageId":"186","endLine":97,"endColumn":71},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"207","severity":1,"message":"168","line":4,"column":10,"nodeType":"165","messageId":"166","endLine":4,"endColumn":16},{"ruleId":"207","severity":1,"message":"208","line":4,"column":18,"nodeType":"165","messageId":"166","endLine":4,"endColumn":25},{"ruleId":"177","severity":1,"message":"188","line":43,"column":32,"nodeType":"179","messageId":"189","endLine":43,"endColumn":34},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","@typescript-eslint/no-unused-vars","'TileLayer' is defined but never used.","Identifier","unusedVar","'SVGOverlay' is defined but never used.","'Circle' is defined but never used.","'Pane' is defined but never used.","'LatLngTuple' is defined but never used.","'EditControl' is defined but never used.","'GeojsonLayer' is defined but never used.","'Afganistan_Layer_Poi' is defined but never used.","'idText' is defined but never used.","Nested block is redundant.","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'mapRef' is assigned a value but never used.","'purpleOptions' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'baselayers' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","Expected '===' and instead saw '=='.","react/jsx-pascal-case","Imported JSX component Afganistan_Layer must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'Accordion' is defined but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","Imported JSX component Afganistan_Timeline must be in PascalCase or SCREAMING_SNAKE_CASE","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'SpinnerForLoading' is defined but never used.","'pushButton' is defined but never used.","no-unused-vars","'Tooltip' is defined but never used.","no-global-assign","no-unsafe-negation"]