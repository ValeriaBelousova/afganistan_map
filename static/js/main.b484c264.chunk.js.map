{"version":3,"sources":["reducers/layers.ts","reducers/index.ts","store.tsx","components/Toolbox/TEST/actions/index.ts","components/Toolbox/Cards/Radar/radarActions/changeZoom.ts","components/Toolbox/Cards/Basemap/basemapActions/levelChoose.ts","components/Toolbox/TEST/Afganistan_Layer.jsx","components/Toolbox/TEST/Icon.jsx","components/Toolbox/TEST/Icon_red.jsx","components/Toolbox/TEST/Icon_black.jsx","components/Toolbox/TEST/Icon_blue.jsx","components/Toolbox/TEST/Afganistan_Map.tsx","components/Toolbox/Tools/toolAction/actionTool.ts","components/Toolbox/TEST/actionTest/actionStatus_Date.ts","components/Toolbox/Cards/Radar/radarActions/changeCenter.ts","components/Toolbox/TEST/Afganistan_timeline_p.tsx","components/Toolbox/TEST/Afganistan_Timeline.tsx","components/Toolbox/TEST/AfganistanToolbox.tsx","components/map_afganistan.tsx","App.tsx","index.tsx"],"names":["INITIAL_STATE","id","zoom","center","style","bounds","polygonsArr","polygons","zoom_change","level","level_name","export_size","downloadChecked","visible","status_date","visible_poly","visible_poi","M10","M05","M01","M500","M200","allReducers","combineReducers","layers","state","action","console","log","type","map","l","payload","layerBounds","shapes","checkboxChecked","downloadCheckedButton","levelChecked","styleChecked","store","createStore","currentbounds","actionZoom","newzoom","actionLevel","Afganistan_Layer","props","myStyle","f","color","weight","fillOpacity","fillColor","properties","neutralStyle","data","FeatureGroup","this","GeoJSON","Popup","Table","striped","bordered","hover","name_1","name_2","objectid","status","url","fetchData","setState","fetch","then","r","json","features","error","React","Component","iconPerson","L","Icon","iconUrl","iconRetinaUrl","iconAnchor","Point","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","className","icon_red","icon_black","icon_blue","connect","dispatch","bindActionCreators","addBounds","zoomChange","setLevel","icon","Default","imagePath","useRef","additionalLyr","Map","minZoom","maxZoom","onViewportChange","e","WMSTileLayer","transparent","format","Marker","position","Tooltip","offset","opacity","permanent","Card","width","Img","variant","src","Body","Title","Text","Button","href","target","actionTool","tools","toolChange","actionStatus_Date","value","actionCenter","newcenter","Afganistan_Timeline_P","setTool","setStatus_Date","setZoom","setCenter","click_li","onClick","useState","document","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b484c264.chunk.js","sourcesContent":["const INITIAL_STATE = [\n    {\n        id: 'map',\n        zoom: 4,\n        center: [34.532780, 69.165830],\n        style: 'https://api.mapbox.com/styles/v1/valeriabelousova/ckko1s46x69o217o2qi6rtrg2/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoidmFsZXJpYWJlbG91c292YSIsImEiOiJjanBmMmt0c2cwNjQyM3FsZ2gzY2dvemNvIn0.skr82NeiNVFPUi-zxKKqiw',\n        bounds: [],\n        polygonsArr: {},\n        polygons: [],\n        zoom_change: false,\n    },\n    {\n        id: 'basemap',\n        level: 'M10',\n        level_name: '1:100 000 000',\n        style: 'rikNews',\n        export_size: 2000,\n        downloadChecked: false,\n    },\n    {\n        id: 'afganistan',\n        visible: false,\n        status_date: 'neutral',\n        visible_poly: false,\n        visible_poi: false,\n        downloadChecked: false,\n    }\n]\n\ntype tplotOptions = {\n    [key: string]: string\n}\n\nconst level_name : tplotOptions = {\n    M10:\"1:100 000 000\",\n    M05:\"1:50 000 000\",\n    M01:\"1:10 000 000\",\n    M500:\"1:500 000\",\n    M200:\"1:200 000\",\n}\n\nexport default function (state = INITIAL_STATE, action: any) {\n    console.log(action);\n    switch (action.type) {\n        case 'BOUNDS_CHANGE':\n            return state.map(l => {\n                if (l.id === 'map') {\n                    l.bounds = action.payload.layerBounds;\n                }\n                return l;\n            });\n        case 'ADD_SHAPES':\n            return state.map(l => {\n                if (l.id === 'map') {\n                    l.polygons = action.payload.shapes;\n                }\n                return l;\n            });\n        case 'DELETE_SHAPES':\n            return state.map(l => {\n                if (l.id === 'map') {\n                    l.polygons = action.payload.shapes;\n                }\n                return l;\n            });\n        case 'ADD_POLYGONS_ARR':\n            return state.map(l => {\n                if (l.id === 'map') {\n                    l.polygonsArr = action.payload.polygonsArr;\n                }\n                return l;\n            });\n        case 'MAP_ZOOM_CHANGE':\n            return state.map(l => {\n                if (l.id === 'map') {\n                    l.zoom = action.payload.zoom;\n                }\n                return l;\n            });\n        case 'MAP_CENTER_CHANGE':\n            return state.map(l => {\n                if (l.id === 'map') {\n                    l.center = action.payload.center;\n                }\n                return l;\n            });\n        case 'MAP_ZOOM_CHANGE_MANUALLY':\n            return state.map(l => {\n                if (l.id === 'map') {\n                    l.zoom_change = action.payload.checkboxChecked;\n                }\n                return l;\n            });\n        case 'BASEMAP_BUTTON_PUSH':\n            return state.map(l => {\n                if (l.id === 'basemap') {\n                    l.downloadChecked = action.payload.downloadCheckedButton;\n                }\n                return l;\n            });\n        case 'BASEMAP_LEVEL_CHOOSE':\n            return state.map(l => {\n                if (l.id === 'basemap') {\n                    l.level = action.payload.levelChecked;\n                    l.level_name = level_name[action.payload.levelChecked]\n                }\n                return l;\n            });\n        case 'BASEMAP_STYLE_CHOOSE':\n            return state.map(l => {\n                if (l.id === 'map') {\n                    l.style = action.payload.style;\n                }\n                return l;\n            });\n        case 'BASEMAP_STYLEEXPORT_CHOOSE':\n            return state.map(l => {\n                if (l.id === 'basemap') {\n                    l.style = action.payload.styleChecked;\n                }\n                return l;\n            });\n        case 'BASEMAP_CHANGE_EXPORT_SIZE':\n                return state.map(l => {\n                    if (l.id === 'basemap') {\n                        l.export_size = action.payload.export_size;\n                    }\n                    return l;\n                });\n                case 'AFGANISTAN_BUTTON_PUSH':\n                    return state.map(l => {\n                        if (l.id === 'afganistan') {\n                            l.visible = action.payload.downloadCheckedButton;\n                        }\n                        return l;\n                    });\n                case 'AFGANISTAN_STATUS_DATE':\n                    return state.map(l => {\n                        if (l.id === 'afganistan') {\n                            l.status_date = action.payload.status_date;\n                        }\n                        return l;\n                    });\n        default:\n            return state\n    }\n    ;\n}\n","import { combineReducers } from 'redux';\nimport LayersReducers from './layers';\n\nconst allReducers = combineReducers({\n    layers: LayersReducers,\n});\n\nexport default allReducers;\n","import { createStore } from 'redux';\nimport allReducers from './reducers';\n\nconst store = createStore(allReducers);\n\nexport default store;\n","export const currentbounds = (bounds:any) => {\n\n    return {\n        type: \"BOUNDS_CHANGE\",\n        payload: { layerBounds: bounds }\n    }\n}\n","export const actionZoom = (newzoom:any) => {\n\n    return {\n        type: \"MAP_ZOOM_CHANGE\",\n        payload: { zoom: newzoom }\n    }\n}","export const actionLevel = (level:string) => {\n    console.log(level)\n\n    return {\n        type: \"BASEMAP_LEVEL_CHOOSE\",\n        payload: { levelChecked: level }\n    }\n}","import React from 'react';\nimport { GeoJSON, FeatureGroup, Popup } from 'react-leaflet';\nimport { Table } from 'react-bootstrap';\nimport { Circle, Tooltip } from 'leaflet';\n//import \"../css/GeojsonLayer.css\"\n\nexport default class Afganistan_Layer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      status_date: 'neutral',\n      data: []\n    };\n\n    console.log('contructor poly');\n  }\n\n  myStyle = (f) => {\n    return {\n      color: 'white',\n      weight: 1,\n      fillOpacity: 1,\n      fillColor: f.properties.color,\n    }\n  }\n\n  neutralStyle = (f) => {\n    return {\n      color: '#9ea4c8',\n      weight: 1,\n      fillOpacity: 1,\n      fillColor: 'white',\n    }\n  }\n\n  render() {\n    console.log('render poly');\n\n    //console.info(this.state.data);\n    return (\n      <FeatureGroup>\n        {this.state.data.map(f => {\n          if (this.state.status_date === \"neutral\") {\n          return (<GeoJSON key={f.properties.objectid} data={f} style={this.neutralStyle(f)} >\n             <Popup>\n             <Table striped bordered hover>\n                <tbody>\n                  <tr>\n                    <td>Регион</td>\n                    <td>{f.properties.name_1}</td>\n                  </tr>\n                  <tr>\n                    <td>Район</td>\n                    <td>{f.properties.name_2}</td>\n                  </tr>\n                </tbody>\n              </Table>\n             </Popup>\n             {/*<Tooltip direction=\"right\" offset={[0, 0]} opacity={1} permanent>{f.properties.name_rus}</Tooltip>*/}\n          </GeoJSON>)\n        }\n        else if (this.state.status_date === \"1_may_2021\" ||\n                  this.state.status_date === \"june_2021\" ||\n                  this.state.status_date === \"july_2021\" ||\n                  this.state.status_date === \"august_2021\" ||\n                  this.state.status_date === \"september_2021\"\n                  ) {\n          return (<GeoJSON key={f.properties.objectid} data={f} style={this.myStyle(f)}>\n             <Popup>\n             <Table striped bordered hover>\n                <tbody>\n                  <tr>\n                    <td>Регион</td>\n                    <td>{f.properties.name_1}</td>\n                  </tr>\n                  <tr>\n                    <td>Район</td>\n                    <td>{f.properties.name_2}</td>\n                  </tr>\n                  <tr>\n                    <td>Статус</td>\n                    <td>{f.properties.status}</td>\n                  </tr>\n                </tbody>\n              </Table>\n             </Popup>\n             {/*<Tooltip direction=\"right\" offset={[0, 0]} opacity={1} permanent>{f.properties.name_rus}</Tooltip>*/}\n          </GeoJSON>)\n        }\n      }\n        )}\n      </FeatureGroup>\n    );\n  }\n\n  componentDidMount() {\n    if (this.props.url) {\n      this.fetchData(this.props.url);\n    }\n    this.setState({\n      status_date: this.props.id,\n    });\n    //console.log(this.props);\n  }\n\n  componentWillUnmount() {\n    console.log('will unmount');\n\n  }\n\n  fetchData(url) {\n    let request = fetch(url)\n\n    request\n      .then(r => r.json())\n      .then(data => {\n        this.setState({\n          data: data.features,\n        });\n      }, (error) => {\n        console.error(error);\n      });\n  }\n}","import L from 'leaflet';\n//import Logo from '../../../../public/logo195.png';\n\nconst iconPerson = new L.Icon({\n    iconUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_icon_nato_leave.png\",\n    iconRetinaUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_icon_nato_leave.png\",\n    iconAnchor: new L.Point(50, 82),\n    popupAnchor: new L.Point(160, -15),\n    shadowUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_icon_nato_leave.png\",\n    shadowSize: new L.Point(50, 82),\n    shadowAnchor: new L.Point(50, 82),\n    iconSize: new L.Point(50, 82),\n    className: 'leaflet-div-icon'\n});\n\nexport { iconPerson };","import L from 'leaflet';\n//import Logo from '../../../../public/logo195.png';\n\nconst icon_red = new L.Icon({\n    iconUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_red_cirlce_icon.png\",\n    iconRetinaUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_red_cirlce_icon.png\",\n    iconAnchor: null,\n    popupAnchor: null,\n    shadowUrl: null,\n    shadowSize: null,\n    shadowAnchor: null,\n    iconSize: new L.Point(18, 18),\n    className: 'leaflet-div-icon'\n});\n\nexport { icon_red };","import L from 'leaflet';\n//import Logo from '../../../../public/logo195.png';\n\nconst icon_black = new L.Icon({\n    iconUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_black_circle_icon.png\",\n    iconRetinaUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_black_circle_icon.png\",\n    iconAnchor: null,\n    popupAnchor: null,\n    shadowUrl: null,\n    shadowSize: null,\n    shadowAnchor: null,\n    iconSize: new L.Point(18, 18),\n    className: 'leaflet-div-icon'\n});\n\nexport { icon_black };","import L from 'leaflet';\n//import Logo from '../../../../public/logo195.png';\n\nconst icon_blue = new L.Icon({\n    iconUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_blue_circle_icon.png\",\n    iconRetinaUrl: \"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/afganistan_blue_circle_icon.png\",\n    iconAnchor: null,\n    popupAnchor: null,\n    shadowUrl: null,\n    shadowSize: null,\n    shadowAnchor: null,\n    iconSize: new L.Point(18, 18),\n    className: 'leaflet-div-icon'\n});\n\nexport { icon_blue };","import React, { useRef } from \"react\";\nimport {\n  Map,\n  TileLayer,\n  FeatureGroup,\n  Popup,\n  WMSTileLayer,\n  Marker,\n  SVGOverlay,\n  Circle,\n  Pane,\n  Tooltip,\n} from \"react-leaflet\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { LatLngTuple } from \"leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { currentbounds } from \"./actions/index\";\nimport { actionZoom } from \"../Cards/Radar/radarActions/changeZoom\";\nimport { actionLevel } from \"../Cards/Basemap/basemapActions/levelChoose\";\nimport GeojsonLayer from \"../Cards/Basemap/Layers\";\nimport Afganistan_Layer from \"./Afganistan_Layer\";\nimport Afganistan_Layer_Poi from \"./Afganistan_Layer_Poi\";\n//import iconPerson from \"./Icon\";\nimport \"./Map.css\";\nimport { idText } from \"typescript\";\nimport L from \"leaflet\";\nimport { iconPerson } from \"./Icon\";\nimport { icon_red } from \"./Icon_red\";\nimport { icon_black } from \"./Icon_black\";\nimport { icon_blue } from \"./Icon_blue\";\n\n// style = 'https://api.mapbox.com/styles/v1/valeriabelousova/ckkgmiumn0idl17qp5eh7nuqh/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoidmFsZXJpYWJlbG91c292YSIsImEiOiJjanBmMmt0c2cwNjQyM3FsZ2gzY2dvemNvIn0.skr82NeiNVFPUi-zxKKqiw'\n// current = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n\n//const defaultLatLng: LatLngTuple = [52.865572, 37.283523];\n\nconst AfganistanMap: React.FC = (props: any) => {\n  {\n    props.layers.map((l: any) => {\n      if (l.icon === \"blue\") {\n      }\n    });\n  }\n  L.Icon.Default.imagePath =\n    \"https://raw.githubusercontent.com/ValeriaBelousova/3d-model/master/\";\n  //const [zoom, setZoom] = useState(props.layers[0].zoom)\n  const mapRef = useRef();\n\n  const purpleOptions = { color: \"purple\" };\n\n  const setZoom = (e: any) => {\n    console.log(props.layers[0].zoom);\n    if (e.zoom != props.layers[0].zoom) {\n      props.zoomChange(e.zoom);\n      if (props.layers[0].zoom <= 5 && props.layers[0].zoom_change === false) {\n        props.setLevel(\"M10\");\n      } else if (props.layers[0].zoom > 5 && props.layers[0].zoom <= 7) {\n        props.setLevel(\"M05\");\n      } else if (props.layers[0].zoom > 7 && props.layers[0].zoom <= 10) {\n        props.setLevel(\"M01\");\n      }\n    }\n  };\n  const additionalLyr = {\n    \"1_may_2021\":\n      \"https://geo.emg24.ru/geoserver/publiclayers/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=publiclayers%3Argnpol_afganistan_1_may_2021&maxFeatures=350&outputFormat=application%2Fjson\",\n    june_2021:\n      \"https://geo.emg24.ru/geoserver/publiclayers/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=publiclayers%3Aafganistan_june_2021&maxFeatures=350&outputFormat=application%2Fjson\",\n    july_2021:\n      \"https://geo.emg24.ru/geoserver/publiclayers/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=publiclayers%3Aafganistan_july_2021&maxFeatures=350&outputFormat=application%2Fjson\",\n    august_2021:\n      \"https://geo.emg24.ru/geoserver/publiclayers/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=publiclayers%3Aafganistan_august_2021&maxFeatures=350&outputFormat=application%2Fjson\",\n    kabul:\n      \"https://geo.emg24.ru/geoserver/publiclayers/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=publiclayers%3Aafganistan_cities&maxFeatures=50&outputFormat=application%2Fjson\",\n    mazari_sharif: \"\",\n    bagram:\n      \"https://geo.emg24.ru/geoserver/baselayers/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=baselayers%3Apoppnt11&maxFeatures=50&outputFormat=application%2Fjson\",\n    bazarak: \"\",\n  };\n  const baselayers = { M10: \"baselayers:group_m11\", M05: \"\", M01: \"\" };\n  return (\n    <Map\n      //ref={mapRef}\n      center={props.layers[0].center}\n      zoom={props.layers[0].zoom}\n      minZoom={6}\n      maxZoom={8}\n      onViewportChange={setZoom}\n    >\n      <WMSTileLayer\n        layers={\"baselayers:afganistan_base\"}\n        url=\"https://geo.emg24.ru/geoserver/baselayers/wms\"\n        transparent={true}\n        format={\"image/png\"}\n      />\n      {props.layers.map((l: any) => {\n        {\n          /*if (l.visible===true) { */\n        }\n        let status_date: string = l.status_date;\n        console.log(\"status_date from props\", status_date);\n        //console.log(L.Icon.Default.imagePath);\n        if (status_date == \"neutral\") {\n          return (\n            <FeatureGroup>\n              {/*<Afganistan_Layer_Poi key={status_date} id={status_date} url={additionalLyr[\"kabul\"]}/>*/}\n              <Afganistan_Layer\n                key={status_date}\n                id={status_date}\n                url={additionalLyr[\"1_may_2021\"]}\n              />\n              <Marker icon={icon_blue} position={[34.53278, 69.16583]}>\n                <Tooltip\n                  offset={[-5, 10]}\n                  opacity={1}\n                  className={\"blue_tooltip\"}\n                  permanent\n                >\n                  <span>Кабул</span>\n                </Tooltip>\n              </Marker>\n            </FeatureGroup>\n          );\n        }\n        if (status_date == \"1_may_2021\") {\n          return (\n            <FeatureGroup>\n              {/*<Afganistan_Layer_Poi key={status_date} id={status_date} url={additionalLyr[\"kabul\"]}/>*/}\n              <Afganistan_Layer\n                key={status_date}\n                id={status_date}\n                url={additionalLyr[\"1_may_2021\"]}\n              />\n              <Marker icon={icon_red} position={[34.53278, 69.16583]}>\n                <Tooltip\n                  offset={[-5, 10]}\n                  opacity={1}\n                  className={\"red_tooltip\"}\n                  permanent\n                >\n                  <span>Кабул</span>\n                </Tooltip>\n              </Marker>\n            </FeatureGroup>\n          );\n        } else if (status_date == \"june_2021\") {\n          return (\n            <FeatureGroup>\n              {/*<Afganistan_Layer_Poi key={status_date} id={status_date} url={additionalLyr[\"kabul\"]}/>*/}\n              <Afganistan_Layer\n                key={status_date}\n                id={status_date}\n                url={additionalLyr[\"june_2021\"]}\n              />\n              <Marker icon={icon_red} position={[34.52023, 69.179961]}>\n                <Tooltip className={\"red_tooltip\"} permanent>\n                  <span>Кабул</span>\n                </Tooltip>\n              </Marker>\n              <Marker icon={icon_black} position={[36.7089, 67.1108]}>\n                <Tooltip className={\"black_tooltip\"} permanent>\n                  <span>Мазари-Шариф</span>\n                </Tooltip>\n              </Marker>\n            </FeatureGroup>\n          );\n        } else if (status_date == \"july_2021\") {\n          return (\n            <FeatureGroup>\n              <Afganistan_Layer\n                key={status_date}\n                id={status_date}\n                url={additionalLyr[\"1_may_2021\"]}\n              />\n              {/*<Afganistan_Layer_Poi key={status_date} id={status_date} url={additionalLyr[\"kabul\"]}/>*/}\n              <Marker icon={icon_red} position={[34.52023, 69.179961]}>\n                <Tooltip className={\"red_tooltip\"} permanent>\n                  <span>Кабул</span>\n                </Tooltip>\n              </Marker>\n              <Marker icon={iconPerson} position={[34.96667, 69.29278]}>\n                <Popup className={\"icon-leave\"}>\n                  <Card style={{ width: \"18rem\" }}>\n                    <Card.Img\n                      variant=\"top\"\n                      src=\"https://raw.githubusercontent.com/ValeriaBelousova/json_data/master/nato.jpg\"\n                    />\n                    <Card.Body>\n                      <Card.Title>Баграм</Card.Title>\n                      <Card.Text>\n                        Последние военные США ушли с авиабазы в Баграме. Почему\n                        это важно и чем опасно?\n                      </Card.Text>\n                      <Button\n                        variant=\"dark\"\n                        //href=\"https://www.bbc.com/russian/news-57684355\"\n                        href=\"https://www.kommersant.ru/doc/4888993\"\n                        target=\"_blank\"\n                      >\n                        Читать\n                      </Button>\n                    </Card.Body>\n                  </Card>\n                </Popup>\n              </Marker>\n            </FeatureGroup>\n          );\n        } else if (status_date == \"august_2021\") {\n          return (\n            <FeatureGroup>\n              <Afganistan_Layer\n                key={status_date}\n                id={status_date}\n                url={additionalLyr[\"august_2021\"]}\n              />\n              {/*<Afganistan_Layer_Poi key={status_date} id={status_date} url={additionalLyr[\"kabul\"]}/>*/}\n              <Marker icon={icon_black} position={[34.52023, 69.179961]}>\n                <Tooltip className={\"black_tooltip\"} permanent>\n                  <span>Кабул</span>\n                </Tooltip>\n              </Marker>\n            </FeatureGroup>\n          );\n        } else if (status_date == \"september_2021\") {\n          return (\n            <FeatureGroup>\n              <Afganistan_Layer\n                key={status_date}\n                id={status_date}\n                url={additionalLyr[\"august_2021\"]}\n              />\n              {/*<Afganistan_Layer_Poi key={status_date} id={status_date} url={additionalLyr[\"kabul\"]}/>*/}\n              <Marker icon={icon_red} position={[35.445, 69.752]}>\n                <Tooltip className={\"red_tooltip\"} permanent>\n                  <span>Базарак</span>\n                </Tooltip>\n              </Marker>\n              <Marker icon={icon_black} position={[34.52023, 69.179961]}>\n                <Tooltip className={\"black_tooltip\"} permanent>\n                  <span>Кабул</span>\n                </Tooltip>\n              </Marker>\n            </FeatureGroup>\n          );\n        }\n\n        {\n          /* } */\n        }\n      })}\n      {/*{props.layers.map( (l:any) => {\n              if (l.visible===true) {\n                let status_date:string = l.status_date;\n                  return ( <Afganistan_Layer_Poi key={status_date} id={status_date} url={additionalLyr[\"kabul\"]}/>)\n                  }})}*/}\n    </Map>\n  );\n};\nconst mapStateToProps = (state: any) => {\n  return {\n    layers: state.layers,\n  };\n};\n\nconst matchDispatchToProps = (dispatch: any) => {\n  return bindActionCreators(\n    {\n      addBounds: currentbounds,\n      zoomChange: actionZoom,\n      setLevel: actionLevel,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, matchDispatchToProps)(AfganistanMap);\n","export const actionTool = (tools:string) => {\n\n    return {\n        type: \"TOOLS_TOOL_CHOOSE\",\n        payload: { toolChange: tools }\n    }\n}\n","export const actionStatus_Date = (value:string) => {\n\n    return {\n        type: \"AFGANISTAN_STATUS_DATE\",\n        payload: { status_date: value }\n    }\n}\n","export const actionCenter = (newcenter:any) => {\n\n    return {\n        type: \"MAP_CENTER_CHANGE\",\n        payload: { center: newcenter }\n    }\n}","import React, {useState} from 'react';\n\nexport const Afganistan_Timeline_P = (status: any) => {\n    console.log(status);\n    if (status.status === 'july_2021') {\n        return (<p>Войска НАТО покидают Баграм</p>);\n    }\n    else if (status.status === 'september_2021') {\n        return (<p>Силы сопротивления передислоцировались в Панджшер</p>);\n    }\n    else if (status.status === 'june_2021') {\n        return (<p>Активизация Талибан</p>);\n    }\n    else if (status.status === 'august_2021') {\n        return (<p>Окружение и взятие Кабула. Бегство президента Ашрафа Гани</p>);\n    }\n    else if (status.status === '1_may_2021') {\n        return (<p>Официальная дата окончательного вывода вооружённых сил НАТО</p>);\n    }\n    else {\n        console.log('not return p el');\n        return null\n    }\n}","import React, {useState} from 'react';\nimport {Button, Accordion, Card, Form} from 'react-bootstrap';\nimport {actionTool} from '../Tools/toolAction/actionTool';\nimport SpinnerForLoading from '../../additional/Spinner/SpinnerForLoading';\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport { actionStatus_Date } from './actionTest/actionStatus_Date';\nimport { actionZoom } from \"../Cards/Radar/radarActions/changeZoom\";\nimport { actionCenter } from \"../Cards/Radar/radarActions/changeCenter\";\nimport { Afganistan_Timeline_P } from \"./Afganistan_timeline_p\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Timeline.css';\n\nconst Afganistan_Timeline: React.FC = (props: any) => {\n\n    const click_li = (e:any) => {\n        console.log('e.target.id', e.target.id)\n        console.log('props before', props.layers[2])\n        if (e.target.id == 'july_2021') {\n            props.setZoom(7);\n            props.setCenter([35.874495, 68.928351]);\n        }\n        else if (e.target.id == 'september_2021') {\n            props.setZoom(8);\n            props.setCenter([34.994495, 68.928351]);\n        }\n        else if (e.target.id == 'june_2021') {\n            props.setZoom(6.5);\n            props.setCenter([34.674495, 68.928351]);\n        }\n        else if (e.target.id == 'august_2021') {\n            props.setZoom(6.5);\n            props.setCenter([34.674495, 68.928351]);\n        }\n        else if (e.target.id == '1_may_2021' || e.target.id == 'neutral') {\n            props.setCenter([34.008630, 66.000947]);\n            props.setZoom(6);\n        }\n        props.setStatus_Date(e.target.id);\n        console.log('props after', props.layers[2])\n    }\n     return (\n         <div className='tools'>\n                 <Card.Body>\n                     <div className=\"container mt-0 mb-0\">\n                            <div className=\"row\">\n                                <div className=\"col-md-0 offset-md-0\">\n                                    <h4 onClick={click_li} id=\"neutral\">Война в Афганистане</h4>\n                                    <ul className=\"timeline\">\n                                        <li onClick={click_li} id=\"1_may_2021\">\n                                            <h5 onClick={click_li} id=\"1_may_2021\">1 мая 2021</h5>\n                                            {props.layers[2].status_date === \"1_may_2021\" ? (<Afganistan_Timeline_P status={\"1_may_2021\"}/>) : null}\n                                        </li>\n                                        <li onClick={click_li} id=\"june_2021\">\n                                            <h5 onClick={click_li} id=\"june_2021\">Июнь 2021</h5>\n                                            {props.layers[2].status_date === \"june_2021\" ? (<Afganistan_Timeline_P status={\"june_2021\"}/>) : null}\n                                        </li>\n                                        <li onClick={click_li} id=\"july_2021\">\n                                        <h5 onClick={click_li} id=\"july_2021\">Июль 2021</h5>\n                                        {props.layers[2].status_date === \"july_2021\" ? (<Afganistan_Timeline_P status={\"july_2021\"}/>) : null}\n                                        </li>\n                                        <li onClick={click_li} id=\"august_2021\">\n                                            <h5 onClick={click_li} id=\"august_2021\">Август 2021</h5>\n                                            {props.layers[2].status_date === \"august_2021\" ? (<Afganistan_Timeline_P status={\"august_2021\"}/>) : null}\n                                        </li>\n                                        <li onClick={click_li} id=\"september_2021\">\n                                            <h5 onClick={click_li} id=\"september_2021\">5 сентября 2021</h5>\n                                            {props.layers[2].status_date === \"september_2021\" ? (<Afganistan_Timeline_P status={\"september_2021\"}/>) : null}\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                 </Card.Body>\n         </div>\n     );\n }\n const mapStateToProps = (state:any) => {\n     return {\n       layers: state.layers\n     }; \n   };\n const matchDispatchToProps = (dispatch:any) => {\n    return bindActionCreators({\n        setTool: actionTool,\n        setStatus_Date: actionStatus_Date,\n        setZoom: actionZoom,\n        setCenter: actionCenter,\n    }, dispatch);\n  };\n \n export default connect(mapStateToProps, matchDispatchToProps)(Afganistan_Timeline);\n","import React, { useState } from 'react';\nimport { Accordion } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\nimport '../Toolbox.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Afganistan_Timeline from \"../TEST/Afganistan_Timeline\";\n\nconst Toolbox:React.FC = (props:any) => {\n    const [checked, setChecked] = useState(props.layers[1].downloadChecked);\n\n    return (\n        <div className='toolbox'>\n            <Afganistan_Timeline/>    \n        </div>\n    );\n}\nconst mapStateToProps = (state:any) => {\n    return {\n        layers: state.layers\n    };\n};\n\nexport default connect(mapStateToProps)(Toolbox);\n","import React from 'react';\nimport '../App.css';\nimport {connect} from \"react-redux\";\n\n//import Toolbox from './Toolbox/Toolbox';\nimport AfganistanMap from './Toolbox/TEST/Afganistan_Map';\nimport Toolbox from './Toolbox/TEST/AfganistanToolbox';\n\nconst Afganistan:React.FC = (props:any) => {\n    return (\n    <div className='page_iframe'>\n    <Toolbox/>\n        <div className=\"mapAfganistan\">\n          <AfganistanMap/>\n        </div>\n    </div>);\n  }\n  const mapStateToProps = (state:any) => {\n    return {\n      layers: state.layers\n    };\n  };\n  \n  export default connect(mapStateToProps)(Afganistan);","import React from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport Afganistan from './components/map_afganistan';\n\n{/*\nconst App :React.FC = (props:any) => { \n  document.title = \"Geo Server\"\n  return (\n    <div className=\"app\">\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={Main_map} />\n          <Route exact path=\"/afganistan\" component={Afganistan} />\n        </div>\n      </Router>\n    </div>)};\n  */}\n\n\nfunction App() {\n    document.title = \"Geo Server\"\n  return (\n      <div className=\"app\">\n        <Afganistan/>\n      </div>\n  );\n}\n\n\n{/*\nconst App:React.FC = (props:any) => {\n  document.title = \"Geo Server\"\n  return (\n    <div id=\"app\">\n      <Toolbox/>\n      <div id=\"map\">\n      {props.layers.map( (l:any) => {\n        let mode:string = l.toolChange;\n        if (mode === \"Afganistan\") {\n          console.log('new map');\n          return (\n            <AfganistanMap/>\n          )\n        }\n      else if (mode === \"Gismeteo\" || \n              mode === \"temperature\" ||\n              mode === \"hydro\" ||\n              mode === \"fires\" ||\n              mode === \"sat\" ||\n              mode === \"shp\" ||\n              mode === \"meteored\" ||\n              mode === \"corona\" ||\n              mode === \"radar\" ||\n              mode === \"vybory\") {\n        console.log('old map');\n        return (<LeafletMap/>)\n      }})}\n        \n      </div>\n    </div>\n);\n}\n*/}\nconst mapStateToProps = (state:any) => {\n  return {\n    layers: state.layers\n  };\n};\n\nexport default connect(mapStateToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}